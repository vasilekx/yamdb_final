name: CI

on: [push]

jobs:
  tests:
    name: Testing
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.7

    - name: Install dependencies
      run: | 
        python -m pip install --upgrade pip 
        pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
        pip install -r api_yamdb/requirements.txt

    - name: Test with flake8 and django tests with pytest
      run: |
        cd api_yamdb/
        python -m flake8
        cd ../
        python -m pytest
      # cd infra_project/
      # python manage.py test

  build_and_push_to_docker_hub:
    name: Build and push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        
      - name: Login to Docker 
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Build and push to Docker Hub
        uses: docker/build-push-action@v2 
        with:
          context: api_yamdb
          file: api_yamdb/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/api_yamdb:latest

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    steps:
    - name: executing remote ssh commands to deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.PASSPHRASE }}
        script: |
            sudo docker-compose stop
            sudo docker-compose rm -f web
            sudo docker image rm ${{ secrets.DOCKER_USERNAME }}/api_yamdb:latest
            rm .env
            touch .env
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            echo DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }} >> .env
            sudo docker-compose up -d
            sudo docker-compose exec web python manage.py migrate
            sudo docker-compose exec web python manage.py collectstatic --no-input
            sudo docker-compose exec web python manage.py loaddata fixtures.json

        # # Выполняет pull образа с DockerHub
        # sudo docker pull ${{ secrets.DOCKER_USERNAME }}/api_yamdb:latest
        # #остановка всех контейнеров
        # sudo docker stop $(sudo docker ps -a -q)
        # sudo docker run --rm -d -p 5000:5000 ${{ secrets.DOCKER_USERNAME }}/infra_actions
  
  send_message:
    name: Telegram Message
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: |
          ${{ github.actor }} created commit:
          Commit message: ${{ github.event.commits[0].message }}
          
          Repository: ${{ github.repository }}
          
          See changes: https://github.com/${{ github.repository }}/commit/${{github.sha}} 
          
          ${{ github.workflow }} успешно выполнен!
